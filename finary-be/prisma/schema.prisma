generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  googleId String? @unique
  email    String  @unique
  password String?
  fullName String
  picture  String?
  isActive Boolean @default(true) @map("is_active")

  // Authentication
  lastLoginAt         DateTime? @map("last_login_at")
  emailVerifiedAt     DateTime? @map("email_verified_at")
  passwordResetToken  String?   @map("password_reset_token")
  passwordResetExpiry DateTime? @map("password_reset_expiry")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]
  userRoles     UserRole[]
  Transaction   Transaction[]
  Category      Category[]
  Budgets       Budgets[]
  Goals         Goals[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model PermissionGroup {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  permissions Permission[]

  @@map("permission_groups")
}

model Permission {
  id          String  @id @default(cuid())
  displayName String  @unique @map("display_name")
  name        String  @unique
  description String?
  resource    String
  action      String

  groupId String?          @map("group_id")
  group   PermissionGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  id String @id @default(cuid())

  // Relations
  userId String @map("user_id")
  roleId String @map("role_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id String @id @default(cuid())

  // Relations
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Budgets {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  amount     Int
  period     Period
  date       DateTime?

  createdAt DateTime @default(now())

  @@unique([userId, categoryId, period], name: "userId_categoryId_period_unique")
  @@map("budgets")
}

model Goals {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  name   String
  amount String
  date   DateTime

  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now())

  @@map("goals")
}

model Transaction {
  id          String          @id @default(cuid())
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  amount      Float
  type        TransactionType
  description String
  date        DateTime
  createdAt   DateTime        @default(now())

  @@map("transaction")
}

model Category {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  name         String        @unique
  color        String?
  icon         String?
  description  String
  transactions Transaction[]
  budgets      Budgets[]
  goals        Goals[]

  @@map("category")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Period {
  WEEKLY
  MONTHLY
  YEARLY
}
